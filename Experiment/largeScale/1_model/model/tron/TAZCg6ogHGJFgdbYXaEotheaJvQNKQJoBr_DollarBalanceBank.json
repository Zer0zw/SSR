{
    "Variables": {
        "User Stake Amount": [
            "bidToUserStakeInfo.amount"
        ],
        "User Stake Reward": [
            "bidToUserStakeInfo.rewards"
        ],
        "User Stake Time": [
            "bidToUserStakeInfo.time"
        ],
        "Stake Token Address": [
            "indexToBank.lp"
        ],
        "Reward Token Address": [
            "cash"
        ]
    },
    "Functions": {
        "Stake": [
            "stake"
        ],
        "getReward": [
            "exit",
            "settle",
            "withdrawBonus"
        ],
        "unStake": [
            "exit",
            "withdraw"
        ],
        "Sensitive Functions": [
            "addBank",
            "init"
        ]
    },
    "Calculations": {
        "Stake": [
            {
                "Function": "stake",
                "Node": [
                    336
                ],
                "Input": [
                    "_amount",
                    "_bid",
                    "_refId"
                ],
                "Calculation Variables": [],
                "Control Variables": [
                    "_status",
                    "addrToUserId",
                    "bankIndex",
                    "epoch",
                    "indexToBank",
                    "indexToBank.decimals",
                    "indexToBank.lastUpdateTime",
                    "indexToBank.lp",
                    "indexToBank.periodFinish",
                    "indexToBank.reward",
                    "indexToBank.rewardPerTokenStored",
                    "indexToBank.secReward",
                    "indexToBank.totalSupply",
                    "indexToUser",
                    "userIndex"
                ],
                "Full Calculation Variables": [
                    "_status",
                    "addrToUserId",
                    "bankIndex",
                    "epoch",
                    "indexToBank",
                    "indexToBank.decimals",
                    "indexToBank.lastUpdateTime",
                    "indexToBank.lp",
                    "indexToBank.periodFinish",
                    "indexToBank.reward",
                    "indexToBank.rewardPerTokenStored",
                    "indexToBank.secReward",
                    "indexToBank.totalSupply",
                    "indexToUser",
                    "userIndex"
                ],
                "Is Depend on this.balance": false
            }
        ],
        "getReward": [
            {
                "Function": "settle",
                "Node": [
                    375
                ],
                "Input": [
                    "_bid",
                    "_refId"
                ],
                "Calculation Variables": [
                    "bidToUserStakeInfo.amount",
                    "bidToUserStakeInfo.rewards",
                    "bidToUserStakeInfo.userRewardPerTokenPaid",
                    "indexToBank.decimals",
                    "indexToBank.lastUpdateTime",
                    "indexToBank.periodFinish",
                    "indexToBank.reward",
                    "indexToBank.rewardPerTokenStored",
                    "indexToBank.secReward",
                    "indexToBank.totalSupply"
                ],
                "Control Variables": [
                    "addrToUserId",
                    "bankIndex",
                    "bidToUserStakeInfo.amount",
                    "bidToUserStakeInfo.rewards",
                    "bidToUserStakeInfo.userRewardPerTokenPaid",
                    "cash",
                    "epoch",
                    "indexToBank",
                    "indexToBank.decimals",
                    "indexToBank.lastUpdateTime",
                    "indexToBank.periodFinish",
                    "indexToBank.reward",
                    "indexToBank.rewardPerTokenStored",
                    "indexToBank.secReward",
                    "indexToBank.totalSupply",
                    "indexToUser",
                    "indexToUser.addr",
                    "indexToUser.bonus",
                    "indexToUser.epoch",
                    "indexToUser.ref",
                    "refRewardRate",
                    "userIndex"
                ],
                "Full Calculation Variables": [
                    "addrToUserId",
                    "bankIndex",
                    "bidToUserStakeInfo.amount",
                    "bidToUserStakeInfo.rewards",
                    "bidToUserStakeInfo.userRewardPerTokenPaid",
                    "cash",
                    "epoch",
                    "indexToBank",
                    "indexToBank.decimals",
                    "indexToBank.lastUpdateTime",
                    "indexToBank.periodFinish",
                    "indexToBank.reward",
                    "indexToBank.rewardPerTokenStored",
                    "indexToBank.secReward",
                    "indexToBank.totalSupply",
                    "indexToUser",
                    "indexToUser.addr",
                    "indexToUser.bonus",
                    "indexToUser.epoch",
                    "indexToUser.ref",
                    "refRewardRate",
                    "userIndex"
                ],
                "Is Depend on this.balance": false
            },
            {
                "Function": "exit",
                "Node": [
                    375
                ],
                "Input": [
                    "_bid",
                    "_refId"
                ],
                "Calculation Variables": [
                    "bidToUserStakeInfo.amount",
                    "bidToUserStakeInfo.rewards",
                    "bidToUserStakeInfo.userRewardPerTokenPaid",
                    "indexToBank.decimals",
                    "indexToBank.lastUpdateTime",
                    "indexToBank.periodFinish",
                    "indexToBank.reward",
                    "indexToBank.rewardPerTokenStored",
                    "indexToBank.secReward",
                    "indexToBank.totalSupply"
                ],
                "Control Variables": [
                    "addrToUserId",
                    "bankIndex",
                    "bidToUserStakeInfo.amount",
                    "bidToUserStakeInfo.rewards",
                    "bidToUserStakeInfo.userRewardPerTokenPaid",
                    "cash",
                    "epoch",
                    "indexToBank",
                    "indexToBank.decimals",
                    "indexToBank.lastUpdateTime",
                    "indexToBank.periodFinish",
                    "indexToBank.reward",
                    "indexToBank.rewardPerTokenStored",
                    "indexToBank.secReward",
                    "indexToBank.totalSupply",
                    "indexToUser",
                    "indexToUser.addr",
                    "indexToUser.bonus",
                    "indexToUser.epoch",
                    "indexToUser.ref",
                    "refRewardRate",
                    "userIndex"
                ],
                "Full Calculation Variables": [
                    "addrToUserId",
                    "bankIndex",
                    "bidToUserStakeInfo.amount",
                    "bidToUserStakeInfo.rewards",
                    "bidToUserStakeInfo.userRewardPerTokenPaid",
                    "cash",
                    "epoch",
                    "indexToBank",
                    "indexToBank.decimals",
                    "indexToBank.lastUpdateTime",
                    "indexToBank.periodFinish",
                    "indexToBank.reward",
                    "indexToBank.rewardPerTokenStored",
                    "indexToBank.secReward",
                    "indexToBank.totalSupply",
                    "indexToUser",
                    "indexToUser.addr",
                    "indexToUser.bonus",
                    "indexToUser.epoch",
                    "indexToUser.ref",
                    "refRewardRate",
                    "userIndex"
                ],
                "Is Depend on this.balance": false
            },
            {
                "Function": "withdrawBonus",
                "Node": [
                    360
                ],
                "Input": [
                    "_refId"
                ],
                "Calculation Variables": [
                    "addrToUserId",
                    "indexToUser.addr",
                    "indexToUser.bonus",
                    "indexToUser.id",
                    "indexToUser.ref"
                ],
                "Control Variables": [
                    "_status",
                    "addrToUserId",
                    "cash",
                    "epoch",
                    "indexToUser",
                    "indexToUser.addr",
                    "indexToUser.bonus",
                    "indexToUser.id",
                    "indexToUser.ref",
                    "userIndex"
                ],
                "Full Calculation Variables": [
                    "_status",
                    "addrToUserId",
                    "cash",
                    "epoch",
                    "indexToUser",
                    "indexToUser.addr",
                    "indexToUser.bonus",
                    "indexToUser.id",
                    "indexToUser.ref",
                    "userIndex"
                ],
                "Is Depend on this.balance": false
            }
        ],
        "unStake": [
            {
                "Function": "withdraw",
                "Node": [
                    352
                ],
                "Input": [
                    "_bid",
                    "_refId"
                ],
                "Calculation Variables": [
                    "bidToUserStakeInfo.amount",
                    "bidToUserStakeInfo.rewards",
                    "bidToUserStakeInfo.userRewardPerTokenPaid",
                    "indexToBank.decimals",
                    "indexToBank.lastUpdateTime",
                    "indexToBank.lp",
                    "indexToBank.periodFinish",
                    "indexToBank.reward",
                    "indexToBank.rewardPerTokenStored",
                    "indexToBank.secReward",
                    "indexToBank.totalSupply"
                ],
                "Control Variables": [
                    "_status",
                    "addrToUserId",
                    "bidToUserStakeInfo.amount",
                    "bidToUserStakeInfo.rewards",
                    "bidToUserStakeInfo.userRewardPerTokenPaid",
                    "epoch",
                    "indexToBank.decimals",
                    "indexToBank.lastUpdateTime",
                    "indexToBank.lp",
                    "indexToBank.periodFinish",
                    "indexToBank.reward",
                    "indexToBank.rewardPerTokenStored",
                    "indexToBank.secReward",
                    "indexToBank.totalSupply",
                    "indexToUser",
                    "userIndex"
                ],
                "Full Calculation Variables": [
                    "_status",
                    "addrToUserId",
                    "bidToUserStakeInfo.amount",
                    "bidToUserStakeInfo.rewards",
                    "bidToUserStakeInfo.userRewardPerTokenPaid",
                    "epoch",
                    "indexToBank.decimals",
                    "indexToBank.lastUpdateTime",
                    "indexToBank.lp",
                    "indexToBank.periodFinish",
                    "indexToBank.reward",
                    "indexToBank.rewardPerTokenStored",
                    "indexToBank.secReward",
                    "indexToBank.totalSupply",
                    "indexToUser",
                    "userIndex"
                ],
                "Is Depend on this.balance": false
            },
            {
                "Function": "exit",
                "Node": [
                    352
                ],
                "Input": [
                    "_bid",
                    "_refId"
                ],
                "Calculation Variables": [
                    "bidToUserStakeInfo.amount",
                    "bidToUserStakeInfo.rewards",
                    "bidToUserStakeInfo.userRewardPerTokenPaid",
                    "indexToBank.decimals",
                    "indexToBank.lastUpdateTime",
                    "indexToBank.lp",
                    "indexToBank.periodFinish",
                    "indexToBank.reward",
                    "indexToBank.rewardPerTokenStored",
                    "indexToBank.secReward",
                    "indexToBank.totalSupply"
                ],
                "Control Variables": [
                    "_status",
                    "addrToUserId",
                    "bidToUserStakeInfo.amount",
                    "bidToUserStakeInfo.rewards",
                    "bidToUserStakeInfo.userRewardPerTokenPaid",
                    "epoch",
                    "indexToBank.decimals",
                    "indexToBank.lastUpdateTime",
                    "indexToBank.lp",
                    "indexToBank.periodFinish",
                    "indexToBank.reward",
                    "indexToBank.rewardPerTokenStored",
                    "indexToBank.secReward",
                    "indexToBank.totalSupply",
                    "indexToUser",
                    "userIndex"
                ],
                "Full Calculation Variables": [
                    "_status",
                    "addrToUserId",
                    "bidToUserStakeInfo.amount",
                    "bidToUserStakeInfo.rewards",
                    "bidToUserStakeInfo.userRewardPerTokenPaid",
                    "epoch",
                    "indexToBank.decimals",
                    "indexToBank.lastUpdateTime",
                    "indexToBank.lp",
                    "indexToBank.periodFinish",
                    "indexToBank.reward",
                    "indexToBank.rewardPerTokenStored",
                    "indexToBank.secReward",
                    "indexToBank.totalSupply",
                    "indexToUser",
                    "userIndex"
                ],
                "Is Depend on this.balance": false
            }
        ]
    }
}