{
    "Variables": {
        "User Stake Amount": [
            "amountLocked"
        ],
        "User Stake Reward": [
            "accomulatedRewards"
        ],
        "User Stake Time": [
            "lockingTime"
        ],
        "Stake Token Address": [
            "lockToken"
        ],
        "Reward Token Address": [
            "rewardToken"
        ]
    },
    "Functions": {
        "Stake": [
            "lockLiquidity"
        ],
        "getReward": [
            "extractEarnings",
            "extractLiquidity",
            "lockLiquidity"
        ],
        "unStake": [
            "extractLiquidity"
        ],
        "Sensitive Functions": [
            "initialize",
            "setLockToken",
            "setRewardToken"
        ]
    },
    "Calculations": {
        "Stake": [
            {
                "Function": "lockLiquidity",
                "Node": [
                    525
                ],
                "Input": [
                    "_amount",
                    "_timeLock"
                ],
                "Calculation Variables": [],
                "Control Variables": [
                    "lockToken",
                    "maxTimeLock",
                    "minTimeLock"
                ],
                "Full Calculation Variables": [
                    "lockToken",
                    "maxTimeLock",
                    "minTimeLock"
                ],
                "Is Depend on this.balance": true
            }
        ],
        "getReward": [
            {
                "Function": "extractEarnings",
                "Node": [
                    563
                ],
                "Input": [],
                "Calculation Variables": [
                    "amountLocked",
                    "lastPriceEarningsExtracted",
                    "lockTokenFeePrice",
                    "lockingTime",
                    "maxDevTreasuryPercentage",
                    "maxTimeLock",
                    "minDevTreasuryPercentage",
                    "minTimeLock",
                    "pricePadding",
                    "totalLiquidityLocked"
                ],
                "Control Variables": [
                    "accomulatedRewards",
                    "amountLocked",
                    "devTreasury",
                    "lastPriceEarningsExtracted",
                    "lockTokenFeePrice",
                    "lockingTime",
                    "maxDevTreasuryPercentage",
                    "maxTimeLock",
                    "minDevTreasuryPercentage",
                    "minTimeLock",
                    "pricePadding",
                    "rewardToken",
                    "totalLiquidityLocked"
                ],
                "Full Calculation Variables": [
                    "accomulatedRewards",
                    "amountLocked",
                    "devTreasury",
                    "lastPriceEarningsExtracted",
                    "lockTokenFeePrice",
                    "lockingTime",
                    "maxDevTreasuryPercentage",
                    "maxTimeLock",
                    "minDevTreasuryPercentage",
                    "minTimeLock",
                    "pricePadding",
                    "rewardToken",
                    "totalLiquidityLocked"
                ],
                "Is Depend on this.balance": false
            },
            {
                "Function": "lockLiquidity",
                "Node": [
                    563
                ],
                "Input": [],
                "Calculation Variables": [
                    "amountLocked",
                    "lastPriceEarningsExtracted",
                    "lockTokenFeePrice",
                    "lockingTime",
                    "maxDevTreasuryPercentage",
                    "maxTimeLock",
                    "minDevTreasuryPercentage",
                    "minTimeLock",
                    "pricePadding",
                    "totalLiquidityLocked"
                ],
                "Control Variables": [
                    "accomulatedRewards",
                    "amountLocked",
                    "devTreasury",
                    "lastPriceEarningsExtracted",
                    "lockTokenFeePrice",
                    "lockingTime",
                    "maxDevTreasuryPercentage",
                    "maxTimeLock",
                    "minDevTreasuryPercentage",
                    "minTimeLock",
                    "pricePadding",
                    "rewardToken",
                    "totalLiquidityLocked"
                ],
                "Full Calculation Variables": [
                    "accomulatedRewards",
                    "amountLocked",
                    "devTreasury",
                    "lastPriceEarningsExtracted",
                    "lockTokenFeePrice",
                    "lockingTime",
                    "maxDevTreasuryPercentage",
                    "maxTimeLock",
                    "minDevTreasuryPercentage",
                    "minTimeLock",
                    "pricePadding",
                    "rewardToken",
                    "totalLiquidityLocked"
                ],
                "Is Depend on this.balance": false
            },
            {
                "Function": "extractLiquidity",
                "Node": [
                    563
                ],
                "Input": [],
                "Calculation Variables": [
                    "amountLocked",
                    "lastPriceEarningsExtracted",
                    "lockTokenFeePrice",
                    "lockingTime",
                    "maxDevTreasuryPercentage",
                    "maxTimeLock",
                    "minDevTreasuryPercentage",
                    "minTimeLock",
                    "pricePadding",
                    "totalLiquidityLocked"
                ],
                "Control Variables": [
                    "accomulatedRewards",
                    "amountLocked",
                    "devTreasury",
                    "lastPriceEarningsExtracted",
                    "lockTokenFeePrice",
                    "lockingTime",
                    "maxDevTreasuryPercentage",
                    "maxTimeLock",
                    "minDevTreasuryPercentage",
                    "minTimeLock",
                    "pricePadding",
                    "rewardToken",
                    "totalLiquidityLocked"
                ],
                "Full Calculation Variables": [
                    "accomulatedRewards",
                    "amountLocked",
                    "devTreasury",
                    "lastPriceEarningsExtracted",
                    "lockTokenFeePrice",
                    "lockingTime",
                    "maxDevTreasuryPercentage",
                    "maxTimeLock",
                    "minDevTreasuryPercentage",
                    "minTimeLock",
                    "pricePadding",
                    "rewardToken",
                    "totalLiquidityLocked"
                ],
                "Is Depend on this.balance": false
            }
        ],
        "unStake": [
            {
                "Function": "extractLiquidity",
                "Node": [
                    581
                ],
                "Input": [],
                "Calculation Variables": [
                    "amountLocked"
                ],
                "Control Variables": [
                    "amountLocked",
                    "depositStarts",
                    "lastPriceEarningsExtracted",
                    "lockToken",
                    "lockTokenFeePrice",
                    "lockingTime",
                    "pricePadding",
                    "totalLiquidityLocked"
                ],
                "Full Calculation Variables": [
                    "amountLocked",
                    "depositStarts",
                    "lastPriceEarningsExtracted",
                    "lockToken",
                    "lockTokenFeePrice",
                    "lockingTime",
                    "pricePadding",
                    "totalLiquidityLocked"
                ],
                "Is Depend on this.balance": false
            }
        ]
    }
}