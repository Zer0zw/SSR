{
    "Variables": {
        "User Stake Amount": [
            "stakerAmount"
        ],
        "User Stake Reward": [
            "stakerReward"
        ],
        "User Stake Time": [],
        "Stake Token Address": [
            "targetToken"
        ],
        "Reward Token Address": [
            "tokensToBeRewardedAddress"
        ]
    },
    "Calculations": {
        "Stake": [
            {
                "Function": "depositAvaxLp",
                "Node": "IStakingManager(stakingManager).deposit(poolId, IERC20(investmentAddress).balanceOf(address(this)) - initBal, 0)"
            }
        ],
        "getReward": [
            {
                "Function": "withdrawAvaxLp",
                "Node": "IERC20(tokensToBeRewardedAddress[i]).transfer(treasury, rewardSnapshot[tokensToBeRewardedAddress[i]] / IStakingManager(stakingManager).bankCut())"
            }
        ],
        "unStake": [
            {
                "Function": "withdrawAvaxLp",
                "Node": "IJoeRouter(_routerAddress).removeLiquidityAVAX(targetToken[0], differenceBal, token0Entitlement, token1Entitlement, tx.origin, block.timestamp + 3600)"
            }
        ]
    }
}