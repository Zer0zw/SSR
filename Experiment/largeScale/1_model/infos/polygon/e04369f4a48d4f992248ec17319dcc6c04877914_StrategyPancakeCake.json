{
    "Variables": {
        "User Stake Amount": [
            "_stakedAmount"
        ],
        "User Stake Reward": [
            "totalDistributedValue"
        ],
        "User Stake Time": [],
        "Stake Token Address": [
            "baseToken"
        ],
        "Reward Token Address": [
            "farmingToken"
        ]
    },
    "Calculations": {
        "Stake": [
            {
                "Function": "deposit",
                "Node": "_stakeCake()"
            },
            {
                "Function": "_stakeCake",
                "Node": "IRewardPool(farmPool).deposit(poolId, _baseBal)"
            }
        ],
        "getReward": [
            {
                "Function": "claimReward",
                "Node": "IRewardPool(farmPool).deposit(poolId, 0)"
            },
            {
                "Function": "harvest",
                "Node": "_distributePerformance(_cakeBalance)"
            },
            {
                "Function": "_distributePerformance",
                "Node": "_swapTokens(_baseToken, _targetProfitToken, _reserveFundAmount, _reserveFund)"
            },
            {
                "Function": "_distributePerformance",
                "Node": "_swapTokens(_baseToken, _targetProfitToken, _rewardBal.mul(_gasFee).div(10000), _performanceReward)"
            }
        ],
        "unStake": [
            {
                "Function": "_withdrawSome",
                "Node": "IRewardPool(farmPool).withdraw(poolId, _amount)"
            },
            {
                "Function": "_withdrawAll",
                "Node": "IRewardPool(farmPool).withdraw(poolId, _stakedAmount)"
            },
            {
                "Function": "retireStrat",
                "Node": "IRewardPool(farmPool).emergencyWithdraw(poolId)"
            },
            {
                "Function": "retireStrat",
                "Node": "IERC20(baseToken).safeTransfer(address(vault), baseBal)"
            }
        ]
    }
}