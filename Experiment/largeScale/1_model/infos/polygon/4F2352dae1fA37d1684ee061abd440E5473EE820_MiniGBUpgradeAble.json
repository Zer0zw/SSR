{
    "Variables": {
        "User Stake Amount": [
            "UserInfo.shares"
        ],
        "User Stake Reward": [
            "UserInfo.rewardDebt"
        ],
        "User Stake Time": [],
        "Stake Token Address": [
            "PoolInfo.want"
        ],
        "Reward Token Address": [
            "GrandV2"
        ]
    },
    "Calculations": {
        "Stake": [
            {
                "Function": "depositBNB",
                "Node": "pool.want.safeIncreaseAllowance(pool.strat, _wantAmt)"
            },
            {
                "Function": "depositToken",
                "Node": "pool.want.safeIncreaseAllowance(pool.strat, _wantAmt)"
            },
            {
                "Function": "depositWant",
                "Node": "pool.want.safeIncreaseAllowance(pool.strat, _wantAmt)"
            }
        ],
        "getReward": [
            {
                "Function": "_deposit",
                "Node": "safeGrandTransfer(msg.sender, pending)"
            },
            {
                "Function": "_withdraw",
                "Node": "safeGrandTransfer(msg.sender, pending)"
            }
        ],
        "unStake": [
            {
                "Function": "withdrawBNB",
                "Node": "safeTransferMatic(msg.sender, address(this).balance)"
            },
            {
                "Function": "withdrawToken",
                "Node": "IERC20(_paidToken).safeTransfer(msg.sender, afterBalance.sub(beforeBalance))"
            },
            {
                "Function": "withdrawWant",
                "Node": "IERC20(pool.want).safeTransfer(msg.sender, afterBalance.sub(beforeBalance))"
            },
            {
                "Function": "emergencyWithdraw",
                "Node": "pool.want.safeTransfer(address(msg.sender), amount)"
            }
        ]
    }
}