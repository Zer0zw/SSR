{
    "Variables": {
        "User Stake Amount": [
            "Staker.numberNFTStaked",
            "Staker.numberNFTStakedPerToken"
        ],
        "User Stake Reward": [
            "Staker.rewardsEarned",
            "Staker.rewardTokensRewardsEarned"
        ],
        "User Stake Time": [
            "nftStakeRecords.nftStakeTime",
            "nftStakeRecords.nftUnstakeTime"
        ],
        "Stake Token Address": [
            "whitelistedTokens"
        ],
        "Reward Token Address": [
            "rewardsToken"
        ]
    },
    "Calculations": {
        "Stake": [
            {
                "Function": "stake",
                "Node": "sendNFT(_whitelistedNFT, _user, address(this), _tokenId"
            },
            {
                "Function": "stakeBatch",
                "Node": "sendNFT(_whitelistedNFTs[i], _msgSender(), address(this), _tokenIds[i])"
            }
        ],
        "getReward": [
            {
                "Function": "claimReward",
                "Node": "rewardsToken.transfer(_user, _payableAmount)"
            },
            {
                "Function": "claimReward",
                "Node": "IERC20(_tokens[i]).transfer(_user, rewardPayableAmount)"
            }
        ],
        "unStake": [
            {
                "Function": "unstake",
                "Node": "sendNFT(_whitelistedNFT, address(this), _user, _tokenId)"
            },
            {
                "Function": "unstakeBatch",
                "Node": "sendNFT(_whitelistedNFTs[i], address(this), _user, _tokenIds[i])"
            },
            {
                "Function": "emergencyUnstake",
                "Node": "sendNFT(_whitelistedNFT, address(this), _user, _tokenId)"
            }
        ]
    }
}