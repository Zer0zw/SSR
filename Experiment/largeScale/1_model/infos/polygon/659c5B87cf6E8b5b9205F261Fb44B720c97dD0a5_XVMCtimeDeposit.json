{
    "Variables": {
        "User Stake Amount": [
            "UserInfo.shares",
            "UserInfo.cakeAtLastUserAction"
        ],
        "User Stake Reward": [],
        "User Stake Time": [
            "UserInfo.lastDepositedTime",
            "UserInfo.mandatoryTimeToServe",
            "UserInfo.lastUserActionTime"
        ],
        "Stake Token Address": [
            "token"
        ],
        "Reward Token Address": [
            "dummyToken"
        ]
    },
    "Calculations": {
        "Stake": [
            {
                "Function": "deposit",
                "Node": "token.safeTransferFrom(msg.sender, address(this), _amount)"
            },
            {
                "Function": "giftDeposit",
                "Node": "token.safeTransferFrom(msg.sender, address(this), _amount)"
            },
            {
                "Function": "addAndExtendStake",
                "Node": "token.safeTransferFrom(msg.sender, address(this), _amount)"
            }
        ],
        "getReward": [
            {
                "Function": "harvest",
                "Node": "token.safeTransfer(_caller, currentCallFee)"
            },
            {
                "Function": "stakeRollover",
                "Node": "IGovernance(admin).stakeRolloverBonus(msg.sender, _poolInto, toPay, _stakeID)"
            }
        ],
        "unStake": [
            {
                "Function": "withdraw",
                "Node": "token.safeTransfer(msg.sender, currentAmount)"
            },
            {
                "Function": "transferStakeToAnotherWallet",
                "Node": "token.safeTransfer(msg.sender, currentAmount)"
            },
            {
                "Function": "hopStakeToAnotherPool",
                "Node": "IacPool(_poolAddress).hopDeposit(currentAmount, _recipient, user.lastDepositedTime, user.mandatoryTimeToServe)"
            }
        ]
    }
}