{
    "Variables": {
        "User Stake Amount": [
            "amountStaked_deprecated",
            "DelegatorUnbond.shares"
        ],
        "User Stake Reward": [
            "initalRewardPerShare",
            "rewardPerShare"
        ],
        "User Stake Time": [
            "DelegatorUnbond.withdrawEpoch"
        ],
        "Stake Token Address": [],
        "Reward Token Address": []
    },
    "Calculations": {
        "Stake": [
            {
                "Function": "buyVoucher",
                "Node": "require(stakeManager.delegationDeposit(validatorId, amountToDeposit, msg.sender), \"deposit failed\")"
            },
            {
                "Function": "restake",
                "Node": "require(stakeManager.transferFunds(validatorId, liquidReward - amountRestaked, user), \"Insufficent rewards\""
            },
            {
                "Function": "migrateIn",
                "Node": "_buyShares(amount, 0, user)"
            }
        ],
        "getReward": [
            {
                "Function": "withdrawRewards",
                "Node": "require(stakeManager.transferFunds(validatorId, liquidRewards, user), \"Insufficent rewards\""
            },
            {
                "Function": "_withdrawAndTransferReward",
                "Node": "require(stakeManager.transferFunds(validatorId, liquidRewards, user), \"Insufficent rewards\""
            }
        ],
        "unStake": [
            {
                "Function": "unstakeClaimTokens",
                "Node": "require(stakeManager.transferFunds(validatorId, _amount, msg.sender), \"Insufficent rewards\""
            },
            {
                "Function": "unstakeClaimTokens_new",
                "Node": "require(stakeManager.transferFunds(validatorId, _amount, msg.sender), \"Insufficent rewards\""
            },
            {
                "Function": "migrateOut",
                "Node": "stakeManager.updateValidatorState(validatorId, -int256(amount))"
            }
        ]
    }
}